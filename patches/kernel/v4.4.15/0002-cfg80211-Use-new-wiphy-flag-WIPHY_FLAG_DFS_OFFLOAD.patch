From eb21f5c43ad637f75e2aac85b76ef9a2816be4f6 Mon Sep 17 00:00:00 2001
From: Rajasekaran Kalidoss <rkalidos@codeaurora.org>
Date: Mon, 27 Feb 2017 11:55:18 +0530
Subject: [PATCH 2/4] cfg80211: Use new wiphy flag WIPHY_FLAG_DFS_OFFLOAD

When flag WIPHY_FLAG_DFS_OFFLOAD is defined, the driver would handle
all the DFS related operations. Therefore the kernel needs to ignore
the DFS state that it uses to block the userspace calls to the driver
through cfg80211 APIs. Also it should treat the userspace calls to
start radar detection as a no-op.

Please note that changes in util.c is not picked up explicitly.
Kernel v4.4.15 uses wrapper cfg80211_get_chans_dfs_required which takes
care of this change.

IRs-Fixed: 202686
Change-Id: I9dd2076945581ca67e54dfc96dd3dbc526c6f0a2
---
 net/wireless/chan.c    | 21 +++++++++++++++++----
 net/wireless/nl80211.c |  3 +++
 2 files changed, 20 insertions(+), 4 deletions(-)

diff --git a/net/wireless/chan.c b/net/wireless/chan.c
index 59cabc9..a4bd4ea 100644
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -319,7 +319,8 @@ static int cfg80211_get_chans_dfs_required(struct wiphy *wiphy,
 		if (!c)
 			return -EINVAL;
 
-		if (c->flags & IEEE80211_CHAN_RADAR)
+		if ((c->flags & IEEE80211_CHAN_RADAR) &&
+		    !(wiphy->flags & WIPHY_FLAG_DFS_OFFLOAD))
 			return 1;
 	}
 	return 0;
@@ -479,7 +480,9 @@ static bool cfg80211_get_chans_dfs_available(struct wiphy *wiphy,
 		if (c->flags & IEEE80211_CHAN_DISABLED)
 			return false;
 
-		if ((c->flags & IEEE80211_CHAN_RADAR)  &&
+		/* check for radar flags */
+		if ((!(wiphy->flags & WIPHY_FLAG_DFS_OFFLOAD)) &&
+		    (c->flags & IEEE80211_CHAN_RADAR) &&
 		    (c->dfs_state != NL80211_DFS_AVAILABLE))
 			return false;
 	}
@@ -590,8 +593,18 @@ static bool cfg80211_secondary_chans_ok(struct wiphy *wiphy,
 
 	for (freq = start_freq; freq <= end_freq; freq += 20) {
 		c = ieee80211_get_channel(wiphy, freq);
-		if (!c || c->flags & prohibited_flags)
-			return false;
+                if (!c)
+                        return false;
+
+                /* check for radar flags */
+                if ((!(wiphy->flags & WIPHY_FLAG_DFS_OFFLOAD)) &&
+                    (prohibited_flags & c->flags & IEEE80211_CHAN_RADAR) &&
+                    (c->dfs_state != NL80211_DFS_AVAILABLE))
+                        return false;
+
+                /* check for the other flags */
+                if (c->flags & prohibited_flags & ~IEEE80211_CHAN_RADAR)
+                        return false;
 	}
 
 	return true;
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 5d89f13..72cfdcf 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -6483,6 +6483,9 @@ static int nl80211_start_radar_detection(struct sk_buff *skb,
 	if (err)
 		return err;
 
+	if (rdev->wiphy.flags & WIPHY_FLAG_DFS_OFFLOAD)
+		return -EOPNOTSUPP;
+
 	if (netif_carrier_ok(dev))
 		return -EBUSY;
 
-- 
1.9.1

